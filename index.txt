XP, 에자일, Scrum, 폭포수, 나선형
p28

구조적 방법론, 정보공학 방법론, 객체지향 방법론, 컴포넌트기반 방법론, 애자일 방법론
p34

일정산정 PERT, CPM, 간트차트
p41

usecase 유스케이스
p61
https://wildojisan.tistory.com/117

DFD
p66

HIPO, NS
p67

동료 peer 검토, 워크스루 walk through 컴토, 인스펙션 inspection 검토
p69

UML 일반화관계 집합관계 연관관계 gillamet, stereo type, 구조적 diagram, 행위 diagram
소프트웨어 아키텍처 pip-filter 패턴, broker 패턴, peer to peer 패턴, MVC 패턴
p72

Middleware 미들웨어, WAS 웹서버, 연동오류예측 생략오류 필사오류 전위오류 이중오류
p59, 109

EAI
p169

상향식 통합 driver, 하향식 통합 stub, test harness
p201

응집도 결합도
p97

디자인패턴
p345
https://wildojisan.tistory.com/151
https://github.com/najongjine/Engineer_Information_Processing_TestClass_2509/blob/main/Day17_java.txt

객체지향 E-R diagram Coad-Yourdon
p344

DB E-R diagram
p233

cocomo, putnam, loc, 기능점수 비용산정
p46

case, cmm, cmmi, spice, git 형상관리
p51

DRM
p181

git, svn, cvs
p189

물리데이터베이스설계, 파티션, 스토리지, DAS, NAS, SAN, Range, Hash
참조 무결성, 개체 무결성, 도메인 무결성
p288

분산데이터베이스, 위치투명성, 분할투명성, 중복투명성, 장애투명성, 병행투명성
p292

임의겁근통제 DAC, 강제접근통제 MAC
p294

반정규화
p301

낚시의 법칙, Pareto, 살충제 paradox, 오류 부재의 궤변
정적테스트, 동적테스트
p194




화이트박스 테스트, 블랙박스 테스트
p196
화이트박스 테스트 -
'화이트박스'라는 이름처럼, 상자가 투명해서 안이 훤히 보이는 상태에서 진행하는 테스트라고 이해하면 쉬워요.
소프트웨어의 내부 소스 코드를 열어보고 그 안의 논리적인 구조나 작동 원리를 검사하는 테스트 기법이에요. 개발자나 테스터가 프로그램의 내부 구조를 알고 있는 상태에서 진행합니다.

🛠️ 화이트박스 테스트의 주요 유형 (기법)
정보처리기사 시험에서 특히 중요하게 다루는 화이트박스 테스트 기법 몇 가지를 알아봅시다.

* 기초 경로 검사 (Base Path Testing):

대표적인 화이트박스 테스트 기법이에요.

프로그램의 제어 흐름도(Flow Graph)를 분석해서, 독립적인 실행 경로를 모두 테스트하는 것을 목표로 해요.

이때, **순환 복잡도(Cyclomatic Complexity)**라는 지표를 사용해 테스트해야 할 독립적인 경로의 최소 개수를 계산해요.

* 제어 구조 검사 (Control Structure Testing): 프로그램의 제어 구조(조건문, 반복문 등)에 초점을 맞춰 테스트하는 방법이에요.

조건 검사 (Condition Testing): 모든 조건문(if 등)에 대해 **참(True)**과 **거짓(False)**인 경우를 모두 테스트해요.

루프 검사 (Loop Testing): 반복문(for, while 등)에 초점을 맞춰, 루프가 정확한 횟수만큼 반복되는지, 시작/종료 조건에 문제가 없는지 등을 테스트해요.

데이터 흐름 검사 (Data Flow Testing): 변수가 정의되고 사용되는 위치에 초점을 맞추어 데이터의 흐름에 오류가 없는지 검사해요.

🔍 화이트박스 테스트의 검증 기준 (커버리지)
'커버리지(Coverage)'는 테스트가 얼마나 코드를 많이 '덮었는지'를 나타내는 기준이에요. 높을수록 더 철저한 테스트를 했다는 의미가 됩니다.

문장 검증 기준 (Statement Coverage): 소스 코드의 **모든 구문(문장)**이 한 번 이상 실행되도록 테스트 케이스를 설계해요. (가장 약한 수준의 커버리지)

분기 검증 기준 (Branch Coverage): 소스 코드의 모든 조건문이 참인 경우와 거짓인 경우를 모두 한 번 이상 실행되도록 테스트 케이스를 설계해요. (결정 검증 기준이라고도 함)

조건 검증 기준 (Condition Coverage): 조건문 안에 있는 개별 조건식의 결과가 참인 경우와 거짓인 경우를 모두 한 번 이상 실행되도록 테스트 케이스를 설계해요.

1. 기초 경로 검사 (Basic Path Testing)
개념: $\text{Tom McCabe}$가 제안한 대표적인 기법으로, 프로그램의 제어 흐름 그래프를 분석하여 독립적인 경로의 수를 측정하고, 이 경로들을 테스트 케이스로 설계하는 기법입니다.

목적: 프로그램 내의 모든 논리적 경로를 최소한 한 번씩 실행하여 테스트의 효율성을 높입니다.

2. 제어 구조 검사 (Control Structure Testing)
프로그램의 제어 구조(조건문, 반복문)에 초점을 맞춘 테스트 기법입니다.

조건 검사, (Condition Testing),	프로그램 내의 모든 논리적 조건이 참(True)과 거짓(False)을 모두 갖도록 테스트합니다.	
루프 검사, (Loop Testing),	**반복 구조(Loop)**에 초점을 맞춰 루프가 $\text{0}$번, $\text{1}$번, 최대 횟수, 경계 횟수 등 다양하게 실행되도록 테스트합니다.	
데이터 흐름 검사, (Data Flow Testing),	프로그램에서 **변수의 정의(Definition)**와 변수 사용(Use) 위치에 초점을 맞추어 데이터의 흐름에 오류가 없는지 검사합니다. 변수가 잘못 정의되거나 사용되는 오류를 찾습니다.


3. 커버리지 유형 (Coverage Types)
문장 커버리지 (Statement Coverage): 소스 코드의 **모든 구문(Statement)**이 최소 한 번 이상 실행되도록 테스트 케이스를 설계합니다. (가장 기본적인 커버리지)

결정 커버리지 / 분기 커버리지 (Decision/Branch Coverage): 프로그램의 모든 **분기점(조건문)**에서 참(True)과 거짓(False) 방향이 모두 한 번 이상 실행되도록 테스트 케이스를 설계합니다.

조건 커버리지 (Condition Coverage): 조건문 내의 개별 논리 조건이 각각 참과 거짓을 갖도록 테스트 케이스를 설계합니다.

경로 커버리지 (Path Coverage): 프로그램 내의 모든 가능한 독립 경로가 한 번 이상 실행되도록 테스트 케이스를 설계합니다. (가장 포괄적이지만, 복잡도가 높아 거의 현실적으로 적용하기 어렵습니다.)




테스트 오라클 test oracle
p198

자료구조, 선형구조, 비선형구조, 알고리즘, 탐욕적, 근사, 분활 깊이우선 DFS,
스택, Q, 전위식 후위식, deQ, tree, graph
p134

탐색 검색 빅O
p137

정규화
p241

DB 병행제어, locking, recovery
p279

DB 도메인 튜블 relation 속성, key, 스키마, degree cardinality
p217

동기식전송제어문자 SYN ACK NAK, 네트워크장비 Hub Repeater Bridge, Switch, Router, Gateway
p416

전진오류제어 Hamming code, 후진오류제어 parity bit, crc, 다항식 코드, ARQ
p418

다중화기 MUX, 집중화기 Concentrator, CSMA, 네트워크 토폴로지 star bus ring tree mesh
p422
CSMA의 핵심 원리
CSMA의 기본 동작은 사람이 대화할 때처럼 "말하기 전에 듣는" 방식입니다.

Carrier Sense (반송파 감지): 데이터를 전송하려는 장치는 먼저 통신 매체(채널)를 '듣습니다'. 즉, 다른 장치가 현재 데이터를 전송 중인지(캐리어 신호가 감지되는지) 확인합니다.

사용 중(Busy)이면: 전송을 미루고 대기합니다.

사용 중이 아니면(Idle): 데이터를 전송합니다.

Multiple Access (다중 접근): 네트워크에 연결된 여러 장치(노드)가 이 매체를 공유하여 데이터를 전송할 수 있음을 의미합니다.

CSMA 자체는 동시에 여러 장치가 채널이 비어 있다고 판단하여 전송을 시작할 때 발생하는 **충돌(Collision)**을 완전히 막지 못합니다. 이 충돌을 처리하기 위해 다음과 같은 두 가지 방식이 추가됩니다.

1. CSMA/CD (Collision Detection, 충돌 탐지)
사용 환경: **유선 LAN (이더넷, Ethernet)**에서 주로 사용됩니다.

원리:

채널을 감지하여 비어 있으면 데이터를 전송합니다.

전송 중에도 충돌이 발생했는지 계속 감지(Detection)합니다.

충돌이 감지되면 즉시 전송을 중단하고 잼(Jam) 신호를 보냅니다.

이후 백오프(Backoff) 알고리즘을 사용하여 임의의 시간 동안 기다린 후 재전송을 시도합니다.

2. CSMA/CA (Collision Avoidance, 충돌 회피)
사용 환경: **무선 LAN (Wi-Fi)**에서 주로 사용됩니다.

원리: 무선 환경에서는 충돌을 정확히 감지하기 어렵기 때문에(Hidden Node 문제 등), 충돌 자체를 미리 피하는(Avoidance) 전략을 사용합니다.

채널 감지 후에도 **추가적인 대기 시간(DIFS, SIFS)**을 갖습니다.

데이터를 보내기 전에 RTS (Request to Send) 패킷을 보내고, 수신자로부터 CTS (Clear to Send) 응답을 받으면 그때 데이터를 전송합니다. 이는 주변의 다른 노드들에게 통신이 시작됨을 알려 충돌을 회피하도록 합니다.





패킷교환방식 가상회선 datagram
p425

라우팅 프로토콜 RIP OSPF
p428

OSI 7계층, TCP UDP, IP, IPSEC
p429

IPv4, IPv6, subnet
p437

chmod
p386
읽기	r	4
쓰기	w	2
실행	x	1
권한 없음	-	0

사용자 (User)	읽기, 쓰기, 실행 (rwx)	4 + 2 + 1	7
그룹 (Group)	읽기, 실행 (r-x)	4 + 0 + 1	5
그 외 (Others)	실행 (---x)	0 + 0 + 1	1


프로세스 상태 ready wait run pcb, thread, process scheduling FIFO RR HRN SRT MFQ
p392

상호배제 Mutex, 세마포어 Semaphore, 교착상태, 은행원 알고리즘
p396
세마포어의 기본 개념
P 연산 (wait, 대기):

자원을 사용하려고 할 때 수행해요.

세마포어 값을 1 감소시켜요.

만약 감소시킨 후 값이 음수라면, 자원을 사용할 수 없으므로 해당 프로세스(또는 스레드)는 대기(잠금) 상태로 전환됩니다.

화장실 비유: 열쇠를 가져가는 행위. 열쇠가 없으면 줄을 서서 기다려야 합니다.

V 연산 (signal, 신호):

자원 사용을 마쳤을 때 수행해요.

세마포어 값을 1 증가시켜요.

만약 증가시키기 전 값이 음수였다면, 대기 중인 프로세스(또는 스레드)가 있다는 뜻이므로 그 중 하나를 **해제(잠금 해제)**시켜 자원을 사용하게 합니다.

화장실 비유: 사용 후 열쇠를 반납하는 행위. 기다리는 사람이 있으면 그 사람에게 열쇠를 넘겨줍니다.



기억장치 배치전략 최초적합 최적적합, 단편화
p398

가상기억장치 페이징 세그먼테이션, 페이지 교체 알고리즘 FIFO, LRU, LFU, NUR, working set, thrashing
p400

바이러스 ddos, troy, worm, smurf, hijack
p471

객체지향 SOLID
https://devinus.tistory.com/13


최신기술
p441


보안솔루션, 방화벽, 차단, 방지 tripwire 
p482




1. 개념적 설계 (Conceptual Design)  ER Diagram
 
목표: 
현실 세계의 데이터를 컴퓨터에 저장할 수 있는 형태로 추상화하여 개념 스키마를 설계하는 단계입니다.
주요 활동:
관리해야 할 데이터(개체)와 그 속성(값)을 식별합니다.
개체와 속성 간의 관계를 나타내는 ER 다이어그램(개체-관계 모델)을 작성합니다.
트랜잭션 모델링을 정의하여 데이터베이스와 사용자 간의 데이터 교환 단위를 정의합니다.
 

2. 논리적 설계 (Logical Design)   정규화
 
목표: 
개념적 설계 단계에서 만들어진 모델을 특정 데이터 모델(주로 관계형 데이터 모델)에 맞게 변환하여, 논리적인 구조를 가진 데이터베이스 스키마(스키마)를 설계하는 단계입니다.
주요 활동:
ER 다이어그램을 관계형 데이터 모델의 릴레이션(테이블)으로 변환하고, 릴레이션 스키마를 정의합니다.
데이터 간의 관계를 테이블 간의 관계로 나타내고, 데이터 무결성을 위한 제약 조건 등을 명시합니다.

3. 물리적 설계 (Physical Design)    CREATE INDEX
 
목표: 
논리적 설계에서 정의된 스키마를 실제 저장 장치(하드디스크 등)에 효율적으로 저장하기 위한 물리적인 데이터 구조를 결정하는 단계입니다.
주요 활동:
저장 레코드 양식을 설계하고, 데이터가 저장될 물리적 공간을 결정합니다.
응답 시간, 저장 공간 효율성, 트랜잭션 처리량 등 성능 관련 요소를 고려합니다.
데이터에 빠르게 접근하기 위한 인덱스(색인) 생성 여부를 결정하고, 접근 경로를 설계합니다.

ICMP (ping)
데이터가 전송 경로의 문제(예: 너무 큰 패킷, 도달 불가능한 목적지)로 인해 제대로 전달되지 않았을 때, 해당 문제를 원래 발신자에게 알려주는 역할을 합니다.
ping: 두 기기 간의 네트워크 연결 상태를 확인하고, 데이터가 왕복하는 데 걸리는 시간을 측정합니다.
traceroute: 데이터가 목적지까지 도달하기 위해 거쳐 가는 모든 라우터 경로를 보여줍니다.


럼바우(Rumbaugh) 분석 기법 (객체 모델링 기법(OMT, Object Modeling Technique))
1. 객체 모델링 (Object Modeling)
시스템의 데이터 구조를 객체 중심으로 모델링합니다. 
클래스, 속성, 연산 및 클래스 간의 관계를 정의하고, 객체 모형으로 표현합니다. 
상태 다이어그램은 사용되지 않습니다.

2. 동적 모델링 (Dynamic Modeling)
객체 간의 상호작용과 시나리오를 모델링합니다. 
상태 다이어그램을 사용하여 객체의 동적인 행위를 표현하며, 이벤트 변화를 중심으로 객체들이 어떻게 상태를 변화시키는지 기술합니다. 

3. 기능 모델링 (Functional Modeling)
시스템의 기능적인 측면을 모델링합니다. 
자료 흐름도(DFD)를 사용하여 시스템의 입출력과 프로세서들의 처리 과정을 기술합니다. 


정적 다이어그램 동적 다이어그램
1. 정적 다이어그램 (Structural Diagrams)
정의: 시스템의 구조와 정적인 관계를 표현하며, 변하지 않는 소프트웨어 요소의 논리적 구조를 보여줍니다. 
주요 다이어그램:
클래스 다이어그램: 클래스, 속성, 메서드, 그리고 클래스 간의 관계(상속, 연관, 의존 등)를 표현합니다. 
객체 다이어그램: 특정 시점의 객체 인스턴스와 그들 사이의 관계를 표현합니다. 
컴포넌트 다이어그램: 시스템의 물리적인 구성 요소인 컴포넌트들과 그들의 관계를 보여줍니다. 
2. 동적 다이어그램 (Behavioral Diagrams)
정의: 소프트웨어가 실행될 때 시간의 흐름에 따라 변경되는 동적인 측면과 객체 간의 상호작용을 모델링합니다. 
주요 다이어그램:
유스케이스 다이어그램: 시스템이 제공하는 기능(유스케이스)과 이를 사용하는 외부 행위자(액터) 간의 관계를 표현합니다. 
시퀀스 다이어그램: 시간 순서에 따라 객체들 간에 교환되는 메시지의 흐름을 보여줍니다. 
활동 다이어그램: 비즈니스 프로세스나 알고리즘의 실행 흐름을 활동과 상태를 통해 표현합니다. 
상태 머신 다이어그램: 객체가 가질 수 있는 다양한 상태와 상태 변화를 위한 조건(이벤트)을 보여줍니다. 


자료구조 트리 tree
루트 노드 (Root Node): 트리의 최상단에 위치하며, 가장 높은 레벨인 0번 레벨에 해당합니다.
레벨 증가: 루트 노드의 바로 아래 자식 노드들은 레벨 1, 그 다음 레벨의 노드는 레벨 2, 이런 식으로 아래로 내려갈수록 레벨이 1씩 증가합니다.
최대 레벨 (트리 높이): 트리가 가지는 가장 높은 레벨을 말하며, 트리의 깊이를 나타내는 중요한 지표입니다.
단말 노드 (Leaf Node): 자식이 더 이상 없는 노드로, 트리의 가장 끝에 위치하는 노드들입니다.
자식 노드 (Son Node): 특정 노드의 바로 아래에 연결된 하위 노드를 의미합니다.
부모 노드 (Parent Node): 특정 노드의 바로 위에 연결된 상위 노드를 의미합니다


해싱 함수 hashing
https://velog.io/@tjrdbfl123/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC-%ED%95%B4%EC%8B%B1%ED%95%A8%EC%88%98
1) 제산법(Division)
: 레코드 키로 해시표의 크기보다 큰 수 중에서 가장 작은 소수로 '나눈' 나머지를 홈 주소로 삼는 방식

2) 제곱법(mid-square)
: 레코드 키 값을 제곱

3) 폴딩법(중첩법)
: XOR

4) 기수 변환법
: 키 숫자의 진수를 다른 진수로 변화시켜 주소 크기를 초과한 높은 자릿수를 절단하고, 이를 다시 주소 범위에 맞게 조정하는 방법

5) 계수 분석법(숫자 분석법)
: 키 값을 이루는 숫자의 분포를 '분석'하여 비교적 고른 자리를 필요한 만큼 선택해서 홈 주소로 삼는 방식

6) 대수적 코딩법
: 키 값을 이루고 있는 각 자리의 비트 수를 한 다항식의 계수로 간주하고, 이 다항식을 해시표의 크기에 의해 정의된 다항식으로 나눙 얻은 나머지 다항식의 계수를 홈 주소로 삼는 방식



데이터베이스 이상현상
삽입 이상(Insertion Anomaly): 새로운 데이터를 테이블에 추가할 때, 다른 데이터의 정보가 누락되어 삽입이 불가능해지는 현상. 
예시: 어떤 과목을 수강하는지 정보가 없는 학생의 경우, 학생의 정보를 입력하더라도 과목 정보가 함께 입력되지 않아 삽입이 되지 않는 경우. 

삭제 이상(Deletion Anomaly): 특정 데이터를 삭제할 때, 의도하지 않은 다른 데이터까지 함께 삭제되어 정보가 손실되는 현상. 
예시: 한 학생이 들은 과목 중 하나의 과목 정보를 삭제할 때, 해당 학생의 다른 모든 정보까지 함께 삭제되어 버리는 경우. 

갱신 이상(Update Anomaly): 같은 데이터가 여러 테이블에 중복 저장되어 있어, 특정 데이터를 갱신할 때 일부 데이터만 갱신되고 나머지는 갱신되지 않아 데이터의 불일치가 발생하는 현상. 
예시: 동일한 학생의 전화번호를 갱신할 때, 일부 행의 전화번호만 수정되고 다른 행의 전화번호는 수정되지 않아 혼란을 야기하는 경우. 

이상현상 해결은 정규화를 통해서 한다


DB ACID 
원자성 (Atomicity): 트랜잭션 내의 모든 연산이 성공적으로 실행되거나, 하나도 실행되지 않아야 합니다. 부분적으로만 완료되는 것이 아니라, 전체가 성공하거나, 아니면 모두 실패하여 이전 상태로 돌아가야 합니다. 
일관성 (Consistency): 트랜잭션이 실행되기 전의 데이터베이스 상태와, 실행이 완료된 후의 상태가 항상 일관성을 유지해야 합니다. 즉, 시스템의 제약 조건은 그대로 유지되어야 합니다. 
격리성 (Isolation): 여러 트랜잭션이 동시에 실행될 때, 각 트랜잭션은 서로 영향을 주지 않고 독립적으로 실행되는 것처럼 동작해야 합니다. 마치 다른 트랜잭션이 존재하지 않는 것처럼, 각자의 작업에만 집중할 수 있도록 보장합니다. 
영속성 (Durability): 트랜잭션이 성공적으로 완료(커밋)되면, 데이터베이스의 변경 사항은 영구적으로 저장되어야 합니다. 시스템 오류나 비정상적인 종료가 발생하더라도, 이미 완료된 트랜잭션의 결과는 유지되어야 합니다. 


DB 관계대수 관계해석
https://sugoring-it.tistory.com/231


IP class A B C subnet
https://sssinga.tistory.com/entry/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC-%EA%B3%84%EC%82%B0%EC%8B%9D-IP%ED%81%B4%EB%9E%98%EC%8A%A4



데이터 접근 권한을 통제 DAC MAC RBAC
https://pth6510.tistory.com/18

MAC (강제적 접근 통제) 상세 설명

객체(파일) 등급: 보고서 파일에 **'일급 기밀'**이라는 보안 등급이 붙어 있습니다.

주체(사용자) 등급:

병사 A: 보안 등급이 **'일반'**입니다.

장군 B: 보안 등급이 **'일급 기밀'**입니다.

통제: 시스템은 병사 A가 파일에 접근하려고 하면, 등급이 낮기 때문에 파일 소유자가 허락했더라도 접근을 강제로 거부합니다. 장군 B만 접근이 허용됩니다.


DAC (임의적 접근 통제) 상세 설명

소유자: 당신이 보고서.docx 파일을 만들었습니다. 당신이 이 파일의 소유자입니다.

권한 부여: 당신은 이 파일을 **"팀장님에게는 읽기와 쓰기 권한"**을 주고, "팀원에게는 읽기 권한만" 주는 등 권한을 자유롭게 설정할 수 있습니다.

자유로운 변경: 언제든지 마음이 바뀌면 팀원에게 주었던 권한을 취소하거나 변경할 수 있습니다.


RBAC 

권한 설정: 관리자는 먼저 조직에 필요한 역할을 정의하고, 각 역할에 필요한 최소한의 권한을 할당합니다.

역할: '인사 담당자'

권한: '직원 급여 정보 조회', '직원 입사/퇴사 기록 수정'

역할: '영업 사원'

권한: '고객 계약 정보 조회/수정', '개인 실적 보고서 작성'

사용자 할당: 신입 사원이 입사하면, 그 사람에게 '인사 담당자' 역할을 할당해 줍니다.

접근: 이 사용자는 자신이 맡은 '인사 담당자' 역할 덕분에 급여 정보에 접근할 수 있지만, '영업 사원'의 권한(고객 계약 정보)은 가질 수 없습니다.



VPN
제시된 내용은 **VPN(Virtual Private Network, 가상 사설망)**의 정의와 특징을 설명하고 있기 때문입니다.

VPN은 사설 네트워크(Private Network)를 공용 네트워크(Public Network), 즉 주로 인터넷을 통해 **가상(Virtual)**으로 확장하고 연결하는 기술입니다.

VPN인 이유 (문장별 해석)
문장들을 조금 더 쉽게 풀어서 설명해 드릴게요.

1. "공용 네트워크를 통해 사설 네트워크를 확장하는 기술이다."
쉽게 말해: 인터넷(공용망) 위에 마치 개인 전용선이 있는 것처럼 안전한 터널을 만들어서, 회사나 집 같은 특정 사설망에 외부에서 접속할 수 있게 해주는 기술입니다.

이러한 '가상의(Virtual)' 연결을 통해 '사설(Private)' 네트워크를 구축하는 것이 VPN의 핵심 목표입니다.

2. "사용자의 IP 주소를 숨기고, 사용자가 어디에서 접속하는지 추적하기 어렵게 만든다."
쉽게 말해: 사용자의 데이터가 VPN 서버를 거쳐 인터넷으로 나가기 때문에, 외부 웹사이트나 서비스에서는 사용자의 실제 IP 주소 대신 VPN 서버의 IP 주소만 보게 됩니다.

이것이 VPN의 주요 보안 및 프라이버시 기능입니다.

3. "종류로는 IPsec 또는 SSL, L2TP 등이 있다."
쉽게 말해: VPN을 구현하는 데 사용되는 **기술(프로토콜)**의 종류를 나열한 것입니다.

IPsec (Internet Protocol Security): IP 계층에서 보안을 제공하는 프로토콜.

SSL/TLS (Secure Sockets Layer / Transport Layer Security): 웹 기반 VPN이나 원격 접속에 주로 사용되는 프로토콜.

L2TP (Layer 2 Tunneling Protocol): 터널링을 생성하는 프로토콜로, 보통 IPsec과 함께 사용되어 보안을 강화합니다.




Ad-hoc
1. "중앙 관리나 고정된 인프라 없이 임시로 구성되는 네트워크이다."
쉽게 말해: 와이파이 공유기(중앙 관리 장비)나 기지국(고정된 인프라) 같은 장비의 도움 없이, 필요할 때마다 **노드(스마트폰, 노트북, 센서 등)**들끼리 자발적으로 모여 네트워크를 만듭니다.

이것이 바로 '애드혹(Ad-hoc)'이라는 이름이 붙은 이유입니다.

2. "일반적으로 무선 통신을 통해 노드들이 직접 연결되어 데이터를 주고받는다."
쉽게 말해: 각 기기가 라우터 역할을 동시에 수행하면서, 데이터가 다른 기기들을 건너(Hop) 목적지까지 전달됩니다. 기지국을 거치지 않고 장치끼리 직접 연결되기 때문에 무선 메시(Mesh) 네트워크의 형태를 가집니다.

3. "긴급 구조, 긴급 회의, 군사적인 상황 등에서 유용하게 활용될 수 있다."
쉽게 말해: 재난 상황으로 인해 통신 인프라(기지국, 광케이블)가 파괴되거나, 군사 작전처럼 빠르게 이동해야 하는 환경에서는 고정된 인프라를 설치할 수 없습니다.

이럴 때 애드혹 네트워크는 장비들이 즉시 네트워크를 구성할 수 있도록 해주는 핵심 기술입니다.




IPSec
"Network layer에서 IP패킷을 암호화하고 인증하는 등의 보안을 위한 표준이다."

IPSec은 OSI 7계층 모델 중 **Network Layer (3계층)**에서 작동하여 IP 패킷 전체 또는 일부에 대한 암호화와 인증 기능을 제공하는 보안 표준입니다.

"기업에서 사설 인터넷망으로 사용할 수 있는 VPN을 구현하는데 사용되는 프로토콜이다."

IPSec은 **Virtual Private Network (VPN)**을 구현하는 데 가장 널리 사용되는 프로토콜 중 하나입니다. VPN을 통해 공용 인터넷망 위에서도 마치 사설망처럼 보안 터널을 만들어 안전하게 통신할 수 있게 해줍니다.

"AH(Authentication Header)와 ESP(Encapsulating Security Payload)라는 두 가지 보안 프로토콜을 사용한다."

IPSec은 실제로 두 가지 주요 프로토콜을 사용하여 보안 서비스를 제공합니다.

AH (Authentication Header): 데이터 무결성과 인증을 담당합니다. (암호화는 제공하지 않음)

ESP (Encapsulating Security Payload): 데이터 암호화와 무결성 및 인증을 제공하여 가장 널리 사용됩니다.




OAuth
비밀번호를 알려주지 않고도 다른 회사(앱)가 내 정보에 접근할 수 있게 해주는 약속 규칙"**인 OAuth

쉽게 말해, 어떤 앱(예: 배달 앱)에 가입할 때 **"카카오톡으로 로그인"**이나 **"구글로 로그인"**을 선택하는 과정을 생각해 보세요.

비밀번호를 안 알려줍니다: 배달 앱은 절대 사용자의 카카오톡 비밀번호를 알지 못합니다.

권한만 줍니다: 카카오톡은 배달 앱에게 **'접근 토큰'**이라는 일회용 열쇠를 줍니다. 이 열쇠는 사용자의 이름과 프로필 사진만 가져갈 수 있게 허락된 것입니다. (절대 비밀번호나 다른 민감한 정보는 못 가져갑니다.)

안전하게 사용합니다: 배달 앱은 이 열쇠(액세스 토큰)를 사용해서 카카오톡 서버에 있는 사용자 이름과 사진을 안전하게 가져와 로그인을 완료합니다.




ATM(Asynchronous Transfer Mode)

보통 인터넷에서는 데이터가 크기가 들쭉날쭉한 패킷(Packet) 형태로 전송됩니다. 하지만 ATM은 모든 데이터를 **'셀(Cell)'**이라는 아주 작은(53바이트) 고정 길이의 조각으로 잘라서 전송합니다.

ATM은 데이터를 보낼 때 '전화 통화'처럼 미리 경로를 설정하는 '연결 지향(Connection-Oriented)' 방식을 사용합니다.
데이터를 보내는 경로(가상 채널)를 미리 정해놓기 때문에, 셀들이 아무리 복잡한 망을 지나가도 순서가 섞이지 않고 도착합니다. 이는 음성 통화나 실시간 영상처럼 순서와 시간 지연이 중요한 서비스에 매우 유리합니다.

비동기적 (Asynchronous): 데이터를 보낼 때 정해진 시간 간격 없이, 보낼 데이터가 있을 때만 보내는 유연한 방식입니다.

통계적 다중화 (Statistical Multiplexing): 여러 사용자가 회선(채널)을 나눠서 효율적으로 사용하는 기술입니다. 회선을 비워두지 않고, 여러 사람이 동시에 데이터를 보낼 수 있도록 하여 통신 효율을 극대화합니다.




**NAT**는 쉽게 말해 사설 IP 주소를 공인 IP 주소로, 또는 그 반대로 변환해주는 기술입니다.


서브넷 마스크
https://www.youtube.com/watch?v=vPDQ4BpfymI
서브넷 : 1, 하나의 큰 네트워크를 몇개의 작은 회사한테 나누어 줄수 있냐
호스트 : 0, 한 회사 안에서 몇개 ip 주소를 가질수 있냐
네트워크 주소 : 시작 부분 주소
브로드캐스트 주소: 끝부분 주소
네트워크 : 한 회사