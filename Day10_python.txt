thislist = ["apple", "banana", "cherry"]
# 우리가 만든 thislist 가 forloop 오른쪽에, x 는 내가만든 변수이름
# list에 있는 원소가 순서대로 x에 담겨요
for x in thislist:
  print(x)

thislist = ["apple", "banana", "cherry"]
# 0 ~ 3
for i in range(len(thislist)):
  print(thislist[i])


thislist = ["apple", "banana", "cherry"]
"""
파이썬이 어려운 이유중 하나가 list comprehension 이라는게 존재해요
forloop, 연산, 출력 이런 잡다한걸 한줄로 할수 있어요
"""
[print(x) for x in thislist]


thislist = ["orange", "mango", "kiwi", "pineapple", "banana"]
# list 정렬
thislist.sort()
print(thislist) # ['banana', 'kiwi', 'mango', 'orange', 'pineapple']


thislist = ["orange", "mango", "kiwi", "pineapple", "banana"]
# 내림차순 정렬할땐 reverse=true 같은거 써줘요
thislist.sort(reverse = True)
print(thislist)


"""
이건 시험에 나올지 안나올지 모르겠는데,
- 하고난 차이 순으로 정렬 하는거래요
"""
def myfunc(n):
  return abs(n - 50)

thislist = [100, 50, 65, 82, 23]
thislist.sort(key = myfunc)
print(thislist)


"""
대문자가 아스키 값이 더 작으니, 그냥 정렬하면 대문자가 앞으로 오는데,
key = str.lower 옵션 주면 소문자를 앞으로 오게 해줘요
"""
thislist = ["banana", "Orange", "Kiwi", "cherry"]
thislist.sort(key = str.lower)
print(thislist)


"""
자바, 파이썬에서 list, class 는 포인터에요
그래서 thislist2의 원소값을 바꾸고 나면 thislist 의 원소값도 바뀌어요
"""
thislist = ["apple", "banana", "cherry"]
thislist2=thislist

thislist2[0]="dog"
print(f"thislist: {thislist}")
print(f"thislist2: {thislist2}")


"""
thislist.copy(), list(thislist), mylist = thislist[:]
이런식으로 하면 list 참조가 아니라 값 복사가 되요
"""
thislist = ["apple", "banana", "cherry"]
mylist = thislist.copy()
mylist = list(thislist)
mylist = thislist[:]
print(mylist)


# 리스트 합치는 방법
list1 = ["a", "b", "c"]
list2 = [1, 2, 3]
list3 = list1 + list2
print(list3) # ['a', 'b', 'c', 1, 2, 3]


# dictionary. hashing 기법을 사용해요
thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
print(thisdict["brand"]) # Ford


"""
파이썬은 scope 개념이 함수빼고 없어요
"""
a = 33
b = 200
if b > a:
  a=9
  print("b is greater than a") # b is greater than a
print(f"a: {a}") # a: 9


"""
파이썬은 if문을 3항 연산자 비슷하게도 쓸수 있어요
True 면 왼쪽, false면 오른쪽
"""
a = 2
b = 330
print("A") if a > b else print("B")


"""
not True , False 값을 반전 시키는 놈이에요
T->F, F->T
"""
a = 33
b = 200
if not a > b:
  print("a is NOT greater than b")