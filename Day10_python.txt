thislist = ["apple", "banana", "cherry"]
# 우리가 만든 thislist 가 forloop 오른쪽에, x 는 내가만든 변수이름
# list에 있는 원소가 순서대로 x에 담겨요
for x in thislist:
  print(x)

thislist = ["apple", "banana", "cherry"]
# 0 ~ 3
for i in range(len(thislist)):
  print(thislist[i])


thislist = ["apple", "banana", "cherry"]
"""
파이썬이 어려운 이유중 하나가 list comprehension 이라는게 존재해요
forloop, 연산, 출력 이런 잡다한걸 한줄로 할수 있어요
"""
[print(x) for x in thislist]


thislist = ["orange", "mango", "kiwi", "pineapple", "banana"]
# list 정렬
thislist.sort()
print(thislist) # ['banana', 'kiwi', 'mango', 'orange', 'pineapple']


thislist = ["orange", "mango", "kiwi", "pineapple", "banana"]
# 내림차순 정렬할땐 reverse=true 같은거 써줘요
thislist.sort(reverse = True)
print(thislist)


"""
이건 시험에 나올지 안나올지 모르겠는데,
- 하고난 차이 순으로 정렬 하는거래요
"""
def myfunc(n):
  return abs(n - 50)

thislist = [100, 50, 65, 82, 23]
thislist.sort(key = myfunc)
print(thislist)


"""
대문자가 아스키 값이 더 작으니, 그냥 정렬하면 대문자가 앞으로 오는데,
key = str.lower 옵션 주면 소문자를 앞으로 오게 해줘요
"""
thislist = ["banana", "Orange", "Kiwi", "cherry"]
thislist.sort(key = str.lower)
print(thislist)


"""
자바, 파이썬에서 list, class 는 포인터에요
그래서 thislist2의 원소값을 바꾸고 나면 thislist 의 원소값도 바뀌어요
"""
thislist = ["apple", "banana", "cherry"]
thislist2=thislist

thislist2[0]="dog"
print(f"thislist: {thislist}")
print(f"thislist2: {thislist2}")


"""
thislist.copy(), list(thislist), mylist = thislist[:]
이런식으로 하면 list 참조가 아니라 값 복사가 되요
"""
thislist = ["apple", "banana", "cherry"]
mylist = thislist.copy()
mylist = list(thislist)
mylist = thislist[:]
print(mylist)


# 리스트 합치는 방법
list1 = ["a", "b", "c"]
list2 = [1, 2, 3]
list3 = list1 + list2
print(list3) # ['a', 'b', 'c', 1, 2, 3]


# dictionary. hashing 기법을 사용해요
thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
print(thisdict["brand"]) # Ford


"""
파이썬은 scope 개념이 함수빼고 없어요
"""
a = 33
b = 200
if b > a:
  a=9
  print("b is greater than a") # b is greater than a
print(f"a: {a}") # a: 9


"""
파이썬은 if문을 3항 연산자 비슷하게도 쓸수 있어요
True 면 왼쪽, false면 오른쪽
"""
a = 2
b = 330
print("A") if a > b else print("B")


"""
not True , False 값을 반전 시키는 놈이에요
T->F, F->T
"""
a = 33
b = 200
if not a > b:
  print("a is NOT greater than b")


# i : 1~5 까지고, 6에서 loop를 빠져나감
i = 1
while i < 6:
  print(i)
  i += 1


"""
상식적으로 else는 if 문이랑 같이 쓰는건데,
파이썬에선 while이랑도 같이 쓸수 있데요
i 가 6이 되면 else 가 실행되요
"""
i = 1
while i < 6:
  print(i)
  i += 1
else:
  print("i is no longer less than 6")


"""
0~5 까지, 6은 제외란 소리
"""
for x in range(6):
  print(x) # 0  1  2  3  4  5

"""
2~5 까지, 6은 제외란 소리
"""
for x in range(2, 6):
  print(x) # 2  3  4  5


"""
2~9 까지, 스텝은 3. 즉 2,5,8
"""
for x in range(2, 10, 3):
  print(x)


# 파이썬에서 2중 forloop 쓰는 스타일
adj = ["red", "big", "tasty"]
fruits = ["apple", "banana", "cherry"]
for x in adj:
  for y in fruits:
    print(x, y)


"""
파이썬에서 함수 만드는 방법
def 함수이름(매개변수):
  어쩌구 저쩌구...
  return 저쩌구

매개변수랑 return은 옵션. 있어도 되고 없어도 된다
"""



"""
파이썬은 함수빼고 scope 없어요.
조심해야 될게, 함수 안에선 별도의 scope 생겨요
"""
def f1(a):
  a=1

a=11
f1(a)
print(a) # 11



"""
함수에 배열, class 넘기는걸 stamp 결합도라고 해요
옜날에는 최고급 컴퓨터 메모리가 64KB 였어요.
그래서 array[1000], class 고객 이런거 함수로 데이터주고받다가
서버 터졌어요
그래서 array, class 는 함수에 넘겨줄때 call by reference
주소로 줘요(본체로 줘요)
"""
def f1(a):
  a[0]=9

a=[1,2,3]
f1(a)
print(a) # [9, 2, 3]


"""
배열 넘겨줬을때, 원소값 바꾸기는 참조,
새로운 배열 할당할때는 새로운 변수를 만듬
"""
def f1(a):
	#a[0]=9
 	a=[34,55]

a=[1,2,3]
f1(a)
print(a) # [1,2,3]
