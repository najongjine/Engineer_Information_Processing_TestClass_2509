x = range(10)
print(x) # range(0, 10)
print(list(x)) # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

x = range(3, 10, 2)
print(x) # range(3, 10, 2)
print(list(x)) # [3, 5, 7, 9]

"""
in := 뭐뭐가 거기에 있니? 반환값은 boolean
"""
r = range(0, 10, 2)
print(6 in r) # True
print(7 in r) # False


"""
lamda(익명함수) := 함수를 드럽게 어렵게 만든거.
어떻게 생겨먹은 함수인지 파악이 중요해요
x 라는 변수에 함수를 담음. 매개변수는 a
return 값은 a+10
"""
x = lambda a: a + 10
print(x(5))

def x(a):
	return a + 10


"""
지 자리끼리 곱하는 문제
map: forloop. 즉, numbers를 하나씩 꺼내서 lamda 넣겠다
각 계산 결과를 list() 함수에 넣음. 그래서 결과값이 list
"""
numbers = [1, 2, 3, 4]
result = list(map(lambda x: x * x, numbers))
print(result) # [1, 4, 9, 16]




"""
파이썬 클래스에서 속성(클래스의 내부 변수)는 self.뭐뭐 하면 되요
__str__ 요게 없이 print(p1) 이렇게 인스턴스를 출력하면
주소가 나오지만, __str__ 를 쓰면 인스턴스가 가진 값들을
볼수 있데요
"""
class Person:
  def __init__(self, name, age):
    self.name = name
    self.age = age

  def __str__(self):
    return f"{self.name}({self.age})"    

p1 = Person("John", 36)

print(p1)


"""
파이썬 class 는 override 만 신경쓰면 되요
"""




def calculate_sum(data):
    result = 0
    temp = data[0]
    for i in range(1, len(data)):
        if data[i] > temp:
            temp = data[i]
        else:
            result += temp - data[i]
    return result

print(calculate_sum([5, 2, 7, 4, 1, 9]))



"""
list comprehension.
forloop + if 같은 잡다한 코드를 한줄로 만든 최악의 문법
"""
nums = [1, 2, 3, 4, 5, 6]
evens = [n for n in nums if n % 2 == 0]
print(evens)  # [2, 4, 6]

"""
1. for n in nums
2. if n % 2 == 0
3. n
4. [ n... ]
"""