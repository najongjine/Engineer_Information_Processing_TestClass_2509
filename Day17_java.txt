package com.itg;

public class Test16 {
	public static void main(String[] args) {
		// GOF 디자인 패턴
		//1. 생성패턴
		// - 추상팩토리 (추상화? 공장)
		// - 팩토리 메소드
		Factory fac = new Factory();
		F1 f1 = fac.getF1();
		F2 f2 = fac.getF2();
		// - 빌더
		// - 프로토타입(원형)
		// - 싱글톤
		SingleTonTest sing = new SingleTonTest();
		F1 fa = sing.f_amount();
		fa.a++;
		F1 fb = sing.f_amount();
		fb.a++;
		F1 fc = sing.f_amount();
		fc.a++;
		SingleTonTest.f.a++;
		System.out.println(++fa.a);
		SingleTonTest sss = new SingleTonTest();
		F1 fd = sss.f_amount();
		fd.a++;
		System.out.println(fd.a);
		// 구조패턴 (구조를 만든다.)
		//1. 어댑터 패턴 - 220 V -> 19V
		//2. 브릿지 패턴 - 연결 하는 다리
		//  - 구현부 와 실행부를 분리하여 연결하는 패턴
		//3. 퍼사드 - 시장같은 구조
		//4. 경량화 - fly weight(공통요소를 )
		//5. proxy patten - 위임자, 대리자
		//6. 데코레이션 - 장식(기능 추가)
		// 행위패턴
		//1. chain of resposiv....\
		//2. command 패턴..
		//3. 인터프리터 패턴..
		//4. 옵저버 패턴(관찰자 obsever) - 
		//5. 방문자 패턴(visitor) - 
		//6. 메멘토 패턴(백업본)
		//7. 전략패턴 (stregy)- 전략에 따른 알고리즘의 변화
		//8. 반복패턴(iterator) - 집합, 반복
		
		
		
	}
}
class SingleTonTest{
	static F1 f;
	SingleTonTest(){
		if(f==null) {
			f=new F1();
		}
	}
	F1 f_amount() {
		return f;
	}
	
}
class Factory {
	F1 getF1() {return new F1();}
	F2 getF2() {return new F2();}
}
class F1{
	int a;
}
class F2{}