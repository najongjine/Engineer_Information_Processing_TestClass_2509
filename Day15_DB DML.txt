-- Departments 테이블 생성
CREATE TABLE Departments (
    department_id INT PRIMARY KEY,
    dept_name VARCHAR(100) NOT NULL UNIQUE COMMENT '부서명',
    location VARCHAR(100) COMMENT '지역'
);

-- Employees 테이블 생성
CREATE TABLE Employees (
    emp_id INT PRIMARY KEY,
    emp_name VARCHAR(100) NOT NULL COMMENT '이름',
    department_id INT COMMENT '부서ID (FK)',
    hire_date VARCHAR(100) COMMENT '입사일',
    salary DECIMAL(10, 2) COMMENT '연봉',
    job_title VARCHAR(100) COMMENT '직무',
    
    -- 외래 키 설정: Employees.department_id -> Departments.department_id
    FOREIGN KEY (department_id) REFERENCES Departments(department_id)
        ON DELETE SET NULL  -- 부서가 삭제되면 직원의 department_id를 NULL로 설정
        ON UPDATE CASCADE   -- 부서 ID가 변경되면 직원 테이블에도 반영
);

-- Projects 테이블 생성
CREATE TABLE Projects (
    project_id INT PRIMARY KEY,
    project_name VARCHAR(100) NOT NULL COMMENT '프로젝트명',
    dept_id INT COMMENT '부서ID (FK)',
    start_date VARCHAR(100) COMMENT '시작일',
    end_date VARCHAR(100) COMMENT '종료일',
    budget DECIMAL(15, 2) COMMENT '예산',
    
    -- 외래 키 설정: Projects.dept_id -> Departments.department_id
    FOREIGN KEY (dept_id) REFERENCES Departments(department_id)
        ON DELETE CASCADE   -- 부서가 삭제되면 해당 부서의 프로젝트도 삭제
        ON UPDATE CASCADE   -- 부서 ID가 변경되면 프로젝트 테이블에도 반영
);



INSERT INTO Departments VALUES
  (1, 'IT', 'Seoul'),
  (2, 'HR', 'Seoul'),
  (3, 'Finance', 'Busan'),
  (4, 'Sales', 'Incheon');

INSERT INTO Employees VALUES
  (101, 'Alice', 1, '2020‑01‑15', 55000, 'Developer'),
  (102, 'Bob', 2, '2019‑05‑20', 45000, 'HR Specialist'),
  (103, 'Charlie', 1, '2021‑07‑01', 62000, 'Senior Developer'),
  (104, 'David', 3, '2018‑09‑10', 70000, 'Accountant'),
  (105, 'Tiger', 3, '2018‑10‑10', 66000, 'Accountant')
  ;

INSERT INTO Projects VALUES
  (201, 'Web Development', 1, '2024‑01‑01', '2024‑12‑31', 100000),
  (202, 'AI Development', 1, '2024‑05‑01', '2024‑11‑31', 200000)
  ;




-- 흑백 화면에서 test2 데이터베이스 선택하기
USE test2;




SELECT
d.department_id,
d.dept_name,
d.location
FROM departments as d
;

SELECT
e.department_id,
e.emp_id,
e.emp_name,
e.hire_date,
e.job_title,
e.salary
FROM employees as e
;

SELECT
p.budget,
p.dept_id,
p.end_date,
p.project_id,
p.project_name,
p.start_date
FROM projects as p
;